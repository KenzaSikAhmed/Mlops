import numpy as np
import pandas as pd
import joblib
import argparse
import logging
import os
from sklearn.metrics import accuracy_score

# V√©rifier si on est dans GitHub Actions
IS_GITHUB_ACTIONS = os.getenv("GITHUB_ACTIONS") == "true"

if not IS_GITHUB_ACTIONS:
    import mlflow
    import mlflow.sklearn
    mlflow.set_tracking_uri("http://127.0.0.1:5000")  # Remplace par ton URI MLflow si besoin
    mlflow.set_experiment("Churn Prediction with SVM")
else:
    print("‚ö†Ô∏è MLflow d√©sactiv√© sur GitHub Actions.")

# Configuration du logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# Importation des fonctions du fichier model_pipeline.py
from model_pipeline import (
    prepare_data,
    train_model,
    evaluate_model,
    save_model,
    load_model,
)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--prepare", action="store_true", help="Pr√©parer les donn√©es")
    parser.add_argument("--train", action="store_true", help="Entra√Æner le mod√®le SVM")
    parser.add_argument("--evaluate", action="store_true", help="√âvaluer le mod√®le SVM")
    parser.add_argument(
        "--data_path",
        type=str,
        default="merged_churn1.csv.csv",
        help="Chemin du jeu de donn√©es",
    )
    args = parser.parse_args()

    if args.prepare:
        try:
            print("üìä Pr√©paration des donn√©es en cours...")
            X_train, X_test, y_train, y_test = prepare_data(args.data_path)
            print("‚úÖ Donn√©es pr√©par√©es avec succ√®s.")
            print(f"Taille de l'ensemble d'entra√Ænement : {X_train.shape[0]} √©chantillons")
            print(f"Taille de l'ensemble de test : {X_test.shape[0]} √©chantillons")
        except Exception as e:
            print(f"‚ùå Erreur lors de la pr√©paration des donn√©es : {e}")
            return

    if args.train:
        try:
            print("üöÄ Entra√Ænement du mod√®le SVM en cours...")
            X_train, X_test, y_train, y_test = prepare_data(args.data_path)

            if not IS_GITHUB_ACTIONS:
                # Lancement de l'exp√©rience MLflow
                with mlflow.start_run():
                    # Entra√Ænement du mod√®le SVM avec GridSearchCV
                    model = train_model(X_train, y_train)

                    # Enregistrer les hyperparam√®tres optimaux
                    mlflow.log_param("Model Type", "SVM")
                    mlflow.log_param("Best C", model.best_params_["C"])
                    mlflow.log_param("Best Kernel", model.best_params_["kernel"])

                    # √âvaluation avant sauvegarde
                    y_pred = model.predict(X_test)
                    accuracy = accuracy_score(y_test, y_pred)
                    mlflow.log_metric("accuracy", accuracy)

                    # Sauvegarde du mod√®le
                    save_model(model, "model.pkl")
                    mlflow.sklearn.log_model(model, "model")

                    print(f"‚úÖ Mod√®le SVM entra√Æn√© et sauvegard√© avec MLflow. Accuracy : {accuracy:.4f}")
                    print(f"MLflow run ID: {mlflow.active_run().info.run_id}")
            else:
                print("‚ö†Ô∏è MLflow d√©sactiv√© sur GitHub Actions. Entra√Ænement du mod√®le sans tracking.")
                model = train_model(X_train, y_train)
                save_model(model, "model.pkl")

        except Exception as e:
            print(f"‚ùå Erreur lors de l'entra√Ænement du mod√®le SVM : {e}")  

    if args.evaluate:
        try:
            print("üîç √âvaluation du mod√®le SVM en cours...")
            if not os.path.exists("model.pkl"):
                raise FileNotFoundError("‚ùå Le fichier model.pkl est introuvable. Entra√Ænez le mod√®le d'abord.")

            X_train, X_test, y_train, y_test = prepare_data(args.data_path)
            model = load_model("model.pkl")
            accuracy = evaluate_model(model, X_test, y_test)
            print(f"‚úÖ √âvaluation termin√©e. Accuracy : {accuracy:.4f}")

        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©valuation : {e}")

if __name__ == "__main__":
    main()

